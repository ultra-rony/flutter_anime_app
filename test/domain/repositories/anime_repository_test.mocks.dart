// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_anime_app/test/domain/repositories/anime_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_anime_app/core/network/network_data_state.dart' as _i2;
import 'package:flutter_anime_app/domain/entities/anime_long_entity.dart'
    as _i6;
import 'package:flutter_anime_app/domain/entities/category_entity.dart' as _i5;
import 'package:flutter_anime_app/domain/repositories/anime_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkDataState_0<T> extends _i1.SmartFake
    implements _i2.NetworkDataState<T> {
  _FakeNetworkDataState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AnimeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRepository extends _i1.Mock implements _i3.AnimeRepository {
  MockAnimeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.NetworkDataState<List<_i5.CategoryEntity>>> getSortedAnime() =>
      (super.noSuchMethod(
            Invocation.method(#getSortedAnime, []),
            returnValue: _i4.Future<
              _i2.NetworkDataState<List<_i5.CategoryEntity>>
            >.value(
              _FakeNetworkDataState_0<List<_i5.CategoryEntity>>(
                this,
                Invocation.method(#getSortedAnime, []),
              ),
            ),
          )
          as _i4.Future<_i2.NetworkDataState<List<_i5.CategoryEntity>>>);

  @override
  _i4.Future<_i2.NetworkDataState<_i6.AnimeLongEntity>> getAnime(
    String? animeId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAnime, [animeId]),
            returnValue:
                _i4.Future<_i2.NetworkDataState<_i6.AnimeLongEntity>>.value(
                  _FakeNetworkDataState_0<_i6.AnimeLongEntity>(
                    this,
                    Invocation.method(#getAnime, [animeId]),
                  ),
                ),
          )
          as _i4.Future<_i2.NetworkDataState<_i6.AnimeLongEntity>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getLocalAnime() =>
      (super.noSuchMethod(
            Invocation.method(#getLocalAnime, []),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<void> insertLocalAnime(Map<String, dynamic>? row) =>
      (super.noSuchMethod(
            Invocation.method(#insertLocalAnime, [row]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
